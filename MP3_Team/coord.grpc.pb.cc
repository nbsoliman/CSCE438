// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: coord.proto

#include "coord.pb.h"
#include "coord.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace csce438 {

static const char* SNSCoord_method_names[] = {
  "/csce438.SNSCoord/Access",
  "/csce438.SNSCoord/Heartbeat",
  "/csce438.SNSCoord/GetSlaveInfo",
  "/csce438.SNSCoord/FillFollowerSyncRT",
  "/csce438.SNSCoord/GetFollowerSyncInfo",
  "/csce438.SNSCoord/GetClusterInfo",
};

std::unique_ptr< SNSCoord::Stub> SNSCoord::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SNSCoord::Stub> stub(new SNSCoord::Stub(channel, options));
  return stub;
}

SNSCoord::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Access_(SNSCoord_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Heartbeat_(SNSCoord_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_GetSlaveInfo_(SNSCoord_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FillFollowerSyncRT_(SNSCoord_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFollowerSyncInfo_(SNSCoord_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetClusterInfo_(SNSCoord_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SNSCoord::Stub::Access(::grpc::ClientContext* context, const ::csce438::CoordRequest& request, ::csce438::CoordReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::CoordRequest, ::csce438::CoordReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Access_, context, request, response);
}

void SNSCoord::Stub::async::Access(::grpc::ClientContext* context, const ::csce438::CoordRequest* request, ::csce438::CoordReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::CoordRequest, ::csce438::CoordReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Access_, context, request, response, std::move(f));
}

void SNSCoord::Stub::async::Access(::grpc::ClientContext* context, const ::csce438::CoordRequest* request, ::csce438::CoordReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Access_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::CoordReply>* SNSCoord::Stub::PrepareAsyncAccessRaw(::grpc::ClientContext* context, const ::csce438::CoordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::CoordReply, ::csce438::CoordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Access_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::CoordReply>* SNSCoord::Stub::AsyncAccessRaw(::grpc::ClientContext* context, const ::csce438::CoordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAccessRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::csce438::CoordMessage, ::csce438::CoordMessage>* SNSCoord::Stub::HeartbeatRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::csce438::CoordMessage, ::csce438::CoordMessage>::Create(channel_.get(), rpcmethod_Heartbeat_, context);
}

void SNSCoord::Stub::async::Heartbeat(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::csce438::CoordMessage,::csce438::CoordMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::csce438::CoordMessage,::csce438::CoordMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::csce438::CoordMessage, ::csce438::CoordMessage>* SNSCoord::Stub::AsyncHeartbeatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::csce438::CoordMessage, ::csce438::CoordMessage>::Create(channel_.get(), cq, rpcmethod_Heartbeat_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::csce438::CoordMessage, ::csce438::CoordMessage>* SNSCoord::Stub::PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::csce438::CoordMessage, ::csce438::CoordMessage>::Create(channel_.get(), cq, rpcmethod_Heartbeat_, context, false, nullptr);
}

::grpc::Status SNSCoord::Stub::GetSlaveInfo(::grpc::ClientContext* context, const ::csce438::MasterRequest& request, ::csce438::MasterReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::MasterRequest, ::csce438::MasterReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSlaveInfo_, context, request, response);
}

void SNSCoord::Stub::async::GetSlaveInfo(::grpc::ClientContext* context, const ::csce438::MasterRequest* request, ::csce438::MasterReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::MasterRequest, ::csce438::MasterReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSlaveInfo_, context, request, response, std::move(f));
}

void SNSCoord::Stub::async::GetSlaveInfo(::grpc::ClientContext* context, const ::csce438::MasterRequest* request, ::csce438::MasterReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSlaveInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::MasterReply>* SNSCoord::Stub::PrepareAsyncGetSlaveInfoRaw(::grpc::ClientContext* context, const ::csce438::MasterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::MasterReply, ::csce438::MasterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSlaveInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::MasterReply>* SNSCoord::Stub::AsyncGetSlaveInfoRaw(::grpc::ClientContext* context, const ::csce438::MasterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSlaveInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSCoord::Stub::FillFollowerSyncRT(::grpc::ClientContext* context, const ::csce438::FollowerSyncRTInfo& request, ::csce438::SyncIdInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::FollowerSyncRTInfo, ::csce438::SyncIdInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FillFollowerSyncRT_, context, request, response);
}

void SNSCoord::Stub::async::FillFollowerSyncRT(::grpc::ClientContext* context, const ::csce438::FollowerSyncRTInfo* request, ::csce438::SyncIdInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::FollowerSyncRTInfo, ::csce438::SyncIdInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FillFollowerSyncRT_, context, request, response, std::move(f));
}

void SNSCoord::Stub::async::FillFollowerSyncRT(::grpc::ClientContext* context, const ::csce438::FollowerSyncRTInfo* request, ::csce438::SyncIdInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FillFollowerSyncRT_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::SyncIdInfo>* SNSCoord::Stub::PrepareAsyncFillFollowerSyncRTRaw(::grpc::ClientContext* context, const ::csce438::FollowerSyncRTInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::SyncIdInfo, ::csce438::FollowerSyncRTInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FillFollowerSyncRT_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::SyncIdInfo>* SNSCoord::Stub::AsyncFillFollowerSyncRTRaw(::grpc::ClientContext* context, const ::csce438::FollowerSyncRTInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFillFollowerSyncRTRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSCoord::Stub::GetFollowerSyncInfo(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::csce438::FollowerSyncInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::ClientInfo, ::csce438::FollowerSyncInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFollowerSyncInfo_, context, request, response);
}

void SNSCoord::Stub::async::GetFollowerSyncInfo(::grpc::ClientContext* context, const ::csce438::ClientInfo* request, ::csce438::FollowerSyncInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::ClientInfo, ::csce438::FollowerSyncInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFollowerSyncInfo_, context, request, response, std::move(f));
}

void SNSCoord::Stub::async::GetFollowerSyncInfo(::grpc::ClientContext* context, const ::csce438::ClientInfo* request, ::csce438::FollowerSyncInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFollowerSyncInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::FollowerSyncInfo>* SNSCoord::Stub::PrepareAsyncGetFollowerSyncInfoRaw(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::FollowerSyncInfo, ::csce438::ClientInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFollowerSyncInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::FollowerSyncInfo>* SNSCoord::Stub::AsyncGetFollowerSyncInfoRaw(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFollowerSyncInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSCoord::Stub::GetClusterInfo(::grpc::ClientContext* context, const ::csce438::SyncIdInfo& request, ::csce438::ClusterInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::SyncIdInfo, ::csce438::ClusterInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetClusterInfo_, context, request, response);
}

void SNSCoord::Stub::async::GetClusterInfo(::grpc::ClientContext* context, const ::csce438::SyncIdInfo* request, ::csce438::ClusterInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::SyncIdInfo, ::csce438::ClusterInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetClusterInfo_, context, request, response, std::move(f));
}

void SNSCoord::Stub::async::GetClusterInfo(::grpc::ClientContext* context, const ::csce438::SyncIdInfo* request, ::csce438::ClusterInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetClusterInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::ClusterInfo>* SNSCoord::Stub::PrepareAsyncGetClusterInfoRaw(::grpc::ClientContext* context, const ::csce438::SyncIdInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::ClusterInfo, ::csce438::SyncIdInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetClusterInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::ClusterInfo>* SNSCoord::Stub::AsyncGetClusterInfoRaw(::grpc::ClientContext* context, const ::csce438::SyncIdInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetClusterInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

SNSCoord::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSCoord_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSCoord::Service, ::csce438::CoordRequest, ::csce438::CoordReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSCoord::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::CoordRequest* req,
             ::csce438::CoordReply* resp) {
               return service->Access(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSCoord_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< SNSCoord::Service, ::csce438::CoordMessage, ::csce438::CoordMessage>(
          [](SNSCoord::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::csce438::CoordMessage,
             ::csce438::CoordMessage>* stream) {
               return service->Heartbeat(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSCoord_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSCoord::Service, ::csce438::MasterRequest, ::csce438::MasterReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSCoord::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::MasterRequest* req,
             ::csce438::MasterReply* resp) {
               return service->GetSlaveInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSCoord_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSCoord::Service, ::csce438::FollowerSyncRTInfo, ::csce438::SyncIdInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSCoord::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::FollowerSyncRTInfo* req,
             ::csce438::SyncIdInfo* resp) {
               return service->FillFollowerSyncRT(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSCoord_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSCoord::Service, ::csce438::ClientInfo, ::csce438::FollowerSyncInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSCoord::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::ClientInfo* req,
             ::csce438::FollowerSyncInfo* resp) {
               return service->GetFollowerSyncInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSCoord_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSCoord::Service, ::csce438::SyncIdInfo, ::csce438::ClusterInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSCoord::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::SyncIdInfo* req,
             ::csce438::ClusterInfo* resp) {
               return service->GetClusterInfo(ctx, req, resp);
             }, this)));
}

SNSCoord::Service::~Service() {
}

::grpc::Status SNSCoord::Service::Access(::grpc::ServerContext* context, const ::csce438::CoordRequest* request, ::csce438::CoordReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSCoord::Service::Heartbeat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::csce438::CoordMessage, ::csce438::CoordMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSCoord::Service::GetSlaveInfo(::grpc::ServerContext* context, const ::csce438::MasterRequest* request, ::csce438::MasterReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSCoord::Service::FillFollowerSyncRT(::grpc::ServerContext* context, const ::csce438::FollowerSyncRTInfo* request, ::csce438::SyncIdInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSCoord::Service::GetFollowerSyncInfo(::grpc::ServerContext* context, const ::csce438::ClientInfo* request, ::csce438::FollowerSyncInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSCoord::Service::GetClusterInfo(::grpc::ServerContext* context, const ::csce438::SyncIdInfo* request, ::csce438::ClusterInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace csce438

